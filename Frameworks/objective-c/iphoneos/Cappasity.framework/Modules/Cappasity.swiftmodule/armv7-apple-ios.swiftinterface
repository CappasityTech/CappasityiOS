// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Cappasity
import CommonCrypto
import Foundation
import ImageIO
import SafariServices
import Swift
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers public class CappasityModelViewParams : ObjectiveC.NSObject {
  @objc public var controlsOffset: UIKit.UIOffset
  @objc public var autoRotate: Swift.Bool
  @objc public var autoRun: Swift.Bool
  @objc public var isLogoShown: Swift.Bool
  @objc public var autoRotateTime: Swift.Float
  @objc public var autoRotateDelay: Swift.Float
  @objc public var autoRotateDir: Cappasity.CappasityAutoRotateDirection
  @objc public var hideAutoRotateOptions: Swift.Bool
  @objc public var hideSettingsButton: Swift.Bool
  @objc public var enableImageZoom: Swift.Bool
  @objc public var zoomQuality: Cappasity.CappasityZoomQuality
  @objc public var hideZoomOption: Swift.Bool
  @objc public var isHintHidden: Swift.Bool
  @objc public var analytics: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol CappasityModelViewDelegate : Cappasity.CappasityDelegate {
  @objc func capServiceDidLoadContent()
}
@objc @_inheritsConvenienceInitializers final public class CappasityModelView : UIKit.UIView {
  @objc weak final public var delegate: Cappasity.CappasityModelViewDelegate? {
    @objc get
    @objc set(newValue)
  }
  @objc weak final public var viewController: UIKit.UIViewController? {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc final public func stopLoading()
  @objc final public func reload()
  @objc final public func set(model: Cappasity.CappasityModel, params: Cappasity.CappasityModelViewParams)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CappasityService : ObjectiveC.NSObject {
  @objc public static func set(userAlias: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol CappasityModelsListDelegate : Cappasity.CappasityDelegate {
  @objc func capService(didReceive models: [Cappasity.CappasityModel])
}
@objc public class CappasityModelsList : ObjectiveC.NSObject {
  @objc public init?(delegate: Cappasity.CappasityModelsListDelegate)
  @objc public func nextModels(count: Swift.Int, offset: Swift.Int) -> Swift.Bool
  @objc public func nextModels(count: Swift.Int) -> Swift.Bool
  @objc public func isValid() -> Swift.Bool
  @objc public func clearStatus()
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum FileAccessType : Swift.Int {
  case publicAccess = 0
  case unlistedAccess = 1
  case privateAccess = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol CappasityModelDelegate : Cappasity.CappasityDelegate {
  @objc func capServiceDidReceiveModelInfo()
  @objc func capService(didReceive preview: UIKit.UIImage, userInfo: Swift.AnyObject?)
}
@objc @_hasMissingDesignatedInitializers final public class CappasityModel : ObjectiveC.NSObject {
  @objc final public var id: Swift.String? {
    @objc get
  }
  @objc weak final public var delegate: Cappasity.CappasityModelDelegate? {
    @objc get
    @objc set(newValue)
  }
  @objc final public var title: Swift.String? {
    @objc get
  }
  @objc final public var sku: Swift.String? {
    @objc get
  }
  @objc final public var access: Cappasity.FileAccessType {
    @objc get
  }
  @objc public init(withId id: Swift.String, delegate: Cappasity.CappasityModelDelegate?)
  @objc public init(withSku sku: Swift.String, delegate: Cappasity.CappasityModelDelegate?)
  @objc public init?(withLink link: Swift.String, delegate: Cappasity.CappasityModelDelegate?)
  @objc final public func receiveInfo()
  @objc final public func getPreview(widthPx: Swift.UInt, heightPx: Swift.UInt, userInfo: Swift.AnyObject?)
  @objc final public func getPreview(widthPt: Swift.UInt, heightPt: Swift.UInt, userInfo: Swift.AnyObject?)
  @objc override dynamic public init()
  @objc deinit
}
public protocol CappasityLogDelegate : AnyObject {
  func cappasityLogReadyToSend(log: [Swift.String : Swift.String])
}
@_hasMissingDesignatedInitializers final public class CappasityLog {
  public static var shared: Cappasity.CappasityLog
  weak final public var delegate: Cappasity.CappasityLogDelegate?
  final public var log: [Swift.String : Swift.String]? {
    get
  }
  @objc deinit
}
@objc public protocol CappasityDelegate : AnyObject {
  @objc func capService(didReceive error: Swift.Int, description: Swift.String, userInfo: Swift.AnyObject?)
}
@objc public enum CappasityZoomQuality : Swift.Int {
  case sdZoom = 1
  case hdZoom = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension Array {
  public subscript(unsafeIndex index: Swift.Int) -> Element? {
    get
  }
}
@objc public enum CappasityAutoRotateDirection : Swift.Int {
  case counterClockwise = -1
  case clockwise = 1
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
extension Cappasity.FileAccessType : Swift.Equatable {}
extension Cappasity.FileAccessType : Swift.Hashable {}
extension Cappasity.FileAccessType : Swift.RawRepresentable {}
extension Cappasity.CappasityZoomQuality : Swift.Equatable {}
extension Cappasity.CappasityZoomQuality : Swift.Hashable {}
extension Cappasity.CappasityZoomQuality : Swift.RawRepresentable {}
extension Cappasity.CappasityAutoRotateDirection : Swift.Equatable {}
extension Cappasity.CappasityAutoRotateDirection : Swift.Hashable {}
extension Cappasity.CappasityAutoRotateDirection : Swift.RawRepresentable {}
